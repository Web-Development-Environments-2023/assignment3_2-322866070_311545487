openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
#- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
 - url: "http://132.73.84.116"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All recipes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: recipe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/watched:
    get:
      tags:
      - Users
      summary: Return the watched recipes that were saved by user
      description: Get an array of recipes that were watched by a specific user
      responses:
        "200":
          description: data about the user's watched recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the watched list of a user
      description: save recipe in the watched list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe_id:
                  type: string
                  description: recipe's id which the user watched
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as watched
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/watched3:
    get:
      tags:
      - Users
      summary: Return the 3 last watched recipes that were saved by user
      description: Get an array of 3 last recipes that were watched by a specific user, if less than 3 exists return all the existing watched recipes
      responses:
        "200":
          description: data about the user's 3 last watched recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/personal:
    get:
      tags:
      - Users
      summary: Return the personal recipes that were created by user
      description: Get an array of recipes that were created by a specific user
      responses:
        "200":
          description: data about the user's created recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: create personal recipe and save in the personal list of a user
      description: create personal recipe and save in the personal list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe_id:
                  type: string
                  description: recipe's id which the user created
                  example: 716429
                picture:
                  type: string
                  description: recipe's picture path
                  example: "c:/pictures/recipe.png" #will be changed to url when we won't be using local db
                name:
                  type: string
                  description: recipe's name
                  example: "Chocolate Cake"
                time_to_prepare:
                  type: string
                  description: recipe's time to prepare in minutes
                  example: "45 to 60 minutes"
                vegan:
                  type: boolean
                  description: is the recipe vegan
                  example: "1"
                vegeterian:
                  type: boolean
                  description: is the recipe vegeterian
                  example: "0"
                ingridients:
                  type: string
                  description: recipe's ingridients
                  example: "half a cup of flour, five chocolate chips"
                instructions:
                  type: string
                  description: recipe's instructions
                  example: "mix everything, put in the oven for 30 minutes"
                number_of_servings:
                  type: string
                  description: recipe's number of servings
                  example: "three small servings"
                glutenFree:
                  type: boolean
                  description: is the recipe glutenFree
                  example: "0"
      responses:
        "200":
          description: The Recipe successfully saved as personal
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /recipes/{recipeId}: #example: /recipes/716429
    get:
      tags:
      - Recipes
      summary: Return the preview details on recipe by his ID
      description: Get preview details on recipe by hid ID
      parameters:
      - name: recipeId
        in: path
        description: recipe ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
                  watched:
                    type: boolean
                    description: if a user is logged in, return whether the recipe was watched or not, if not logged in return false
                    example: "1"
                  favorite:
                    type: boolean
                    description: if a user is logged in, return whether the recipe was favorited or not, if not logged in return false
                    example: "1"
        "404":
          description: recipeId is not found
  /recipes/searchRecipes:
    post: #the access to the api was only allowed when it's a post request, get request returned an error
      tags:
      - Recipes
      summary: search recipes by filters
      description: search recipes by filters
      # parameters:
      # - name: query
      #   description: search query for API
      #   required: false
      #   style: simple
      #   explode: false
      #   example: "pasta"
      #   schema:
      #     type: string
          
      # - name: cuisine
      #   description: Select certain cuisine's recipes
      #   required: false
      #   style: simple
      #   explode: false
      #   example: "Italian"
      #   schema:
      #     type: string
          
      # - name: diet
      #   description: Select certain diet recipes
      #   required: false
      #   style: simple
      #   explode: false
      #   example: "vegetarian"  
      #   schema:
      #     type: string
                
      # - name: intolerances
      #   description: Select certain intolerances recipes
      #   required: false
      #   style: simple
      #   explode: false
      #   example: "Peanut"  
      #   schema:
      #     type: string
               
      # - name: number
      #   enum: [5,10,15]
      #   description: Select amount of recipes to be returend
      #   required: true
      #   default: 5
      #   style: simple
      #   explode: false
      #   example: 10   
      #   schema:
      #     type: integer
             
      # - name: watched
      #   type: boolean
      #   description: if a user is logged in, return whether the recipe was watched or not, if not logged in return false
      #   example: "1"
      # - name: favorite
      #   type: boolean
      #   description: if a user is logged in, return whether the recipe was favorited or not, if not logged in return false
      #   example: "1"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: search query for API
                  example: pasta
                cuisine:
                  type: string
                  description: select certain cuisine's recipes
                  example: "Italian"
                diet:
                  type: string
                  description: select certain diet recipes
                  example: "vegetarian"
                intolerances:
                  type: string
                  description: select certain intolerances recipes
                  example: "Peanut"
                number:
                  type: integer
                  enum: [5,10,15]
                  default: 5
                  description: select amount of recipes to be returned
                  example: "10"
                watched:
                  type: boolean
                  description: if a user is logged in, return whether the recipe was watched or not, if not logged in return false
                  example: "0"
                favorite:
                  type: boolean
                  description: if a user is logged in, return whether the recipe was favored or not, if not logged in return false
                  example: "0"
      responses:
        "200":
          description: The Recipe successfully saved as watched
        "422":
          description: Invalid or missing arguments
  /recipes/randomRecipes:
    post: #the access to the api was only allowed when it's a post request, get request returned an error
      tags:
      - Recipes
      summary: get random recipes
      description: get random recipes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                $ref: '#/components/schemas/RecipePreview'
                watched:
                  type: boolean
                  description: if a user is logged in, return whether the recipe was watched or not, if not logged in return false
                  example: "1"
                favorite:
                  type: boolean
                  description: if a user is logged in, return whether the recipe was favorited or not, if not logged in return false
                  example: "1"
      responses:
        "200":
          description: The Recipe successfully saved as watched
  /recipes/family:
    get:
      tags:
      - Recipes
      summary: Return the family recipes
      description: Get an array of the family recipes
      responses:
        "200":
          description: data about the family recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/family_recipes'
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains letters only
        password:
          maxLength: 10
          minLength: 5
          description: password contains at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    family_recipes:
      type: object
      properties:
        recipe_id:
          type: string
          description: recipe identifier
          example: chocolate_cake_1
        recipe_owner:
          type: string
          description: recipe owner
          example: Shahar
        occasion:
          type: string
          description: occasions to make the recipe
          example: family dinner
        ingridients:
          type: string
          description: recipe's ingridients
          example: 3 eggs, half a cup of flour
        instructions:
          type: string
          description: how to make the recipe
          example: mix everything together and put in the oven for 30 minutes
        picture:
          type: string
          description: recipe's picture path
          example: "c:/pictures/recipe.png" #will be changed to url when we won't be using local db
    favorite_recipes:
      type: object
      properties:
        user_id:
          type: string
          description: identifier of the user who favorited the recipe
          example: Shahar
        recipe_id:
          type: string
          description: recipe identifier
          example: 123456
    watched_recipes:
      type: object
      properties:
        user_id:
          type: string
          description: identifier of the user who watched the recipe
          example: Shahar
        recipe_id:
          type: string
          description: recipe identifier
          example: 123456
        date:
          type: datetime
          description: when was the recipe last watched
          example: 2022-12-28 23:59:59
    personal_recipes:
      type: object
      properties:
        user_id:
          type: string
          description: identifier of the user who created the recipe
          example: Shahar
        recipe_id:
          type: string
          description: recipe identifier
          example: shahar's_recipe_1
        picture:
          type: string
          description: recipe's picture path
          example: "c:/pictures/recipe.png" #will be changed to url when we won't be using local db
        name:
          type: string
          description: recipe's title/name
          example: Chocolate Cake #will be changed to url when we won't be using local db
        time_to_prepare:
          type: string
          description: recipe's time to prepare in minutes
          example: "45 to 60 minutes"
        vegan:
          type: boolean
          description: is the recipe vegan
          example: "1"
        vegeterian:
          type: boolean
          description: is the recipe vegeterian
          "example": "0"
        ingridients:
          type: string
          description: recipe's ingridients
          example: "half a cup of flour, five chocolate chips"
        instructions:
          type: string
          description: recipe's ingridients
          example: "mix everything"
        number_of_servings:
          type: string
          description: recipe's number of servings
          example: "three small servings"
        glutenFree:
          type: boolean
          description: is the recipe glutenFree
          example: "0"
        
